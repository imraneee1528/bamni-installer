- name: Fetch all existing  backups
  find:
     paths: "{{backup_path}}"
     patterns: "*_full,*_incr"
     file_type: directory
  register: result_files

- name: Find base directory for backup
  shell: touch {{backup_path}}/backup_info.txt; cat {{backup_path}}/backup_info.txt|tail -n 1|cut -f 3 -d ' '
  register: base_directory
  when: strategy == 'incr'

- set_fact:
     latest_backup_dir: "{{backup_path}}/{{base_directory.stdout}}"
  when: result_files.matched > 0 and base_directory is defined and strategy == 'incr'

- name: Log the backup event
  shell: echo `date +%Y%m%d%H%M%S` 'type:{{strategy}}' 'basedir:{{latest_backup_dir}}' 'incrementaldir:{{backup_path}}/{{ time.stdout }}_{{strategy}}' >>/var/log/bahmni-backup.log
  when: latest_backup_dir is defined

- name: Take full backup using xtrabackup
  shell: xtrabackup --user={{mysql_root_user}} --password={{mysql_root_password}}  --backup --target-dir={{backup_path}}/{{ time.stdout }}_full/ --databases {{db}}
  sudo: yes
  when: (strategy == "full") or (strategy == "incr" and result_files.matched == 0)

- name: Write Full backup event to file
  shell: echo `date +%Y%m%d%H%M%S` 'full {{ time.stdout }}_full' >> {{backup_path}}/backup_info.txt
  sudo: yes
  when: (strategy == "incr" and result_files.matched == 0)

- name: Backup the schema of db to full backkup dir
  shell: mysqldump -u {{mysql_root_user}}  --password={{mysql_root_password}} --no-data --routines {{db}} >{{backup_path}}/{{ time.stdout }}_full/{{db}}_schema.sql
  when: (strategy == "full") or (strategy == "incr" and result_files.matched == 0)

- name: Write Full backup event to file
  shell: echo `date +%Y%m%d%H%M%S` '{{strategy}} {{ time.stdout }}_{{strategy}}' >> {{backup_path}}/backup_info.txt
  sudo: yes
  when: strategy == "full"

- name: Log backup ended using xtrabackup
  shell: "echo `date +%Y%m%d-%H:%M:%S` COMPLETED : Full backup using Xtrabackup to dir:{{backup_path}}/{{ time.stdout }}_full/  >> {{log_file}}"
  when: (strategy == "full") or (strategy == "incr" and result_files.matched == 0)

- name: Take Incremental backup using xtrabackup
  shell: xtrabackup --user={{mysql_root_user}} --password={{mysql_root_password}} --backup --target-dir={{backup_path}}/{{ time.stdout }}_incr/  --incremental-basedir={{ latest_backup_dir }}/ --databases {{db}}
  sudo: yes
  when: strategy == "incr" and result_files.matched > 0

- name: Backup the schema of db to incr backkup dir
  shell: mysqldump -u {{mysql_root_user}}  --password={{mysql_root_password}} --no-data --routines {{db}} >{{backup_path}}/{{ time.stdout }}_incr/{{db}}_schema.sql
  when: strategy == "incr" and result_files.matched > 0

- name: Write Incremental backup event to file
  shell: echo `date +%Y%m%d%H%M%S` '{{strategy}} {{ time.stdout }}_{{strategy}} {{base_directory.stdout}}' >> {{backup_path}}/backup_info.txt
  sudo: yes
  when: strategy == "incr" and result_files.matched > 0

- name: Log backup ended using xtrabackup
  shell: "echo `date +%Y%m%d-%H:%M:%S` COMPLETED : Incremental backup using Xtrabackup to dir:{{backup_path}}/{{ time.stdout }}_incr/  >> {{log_file}}"
  when: strategy == "incr" and result_files.matched > 0

- name: Find target backup file for retention point
  shell: ls -1tr {{backup_path}} |grep _full|tail -n{{retention_limit}} |head -1
  register: oldest_backup_dir_to_retain

- name: Find metadata of retention point file
  find:
     paths: "{{backup_path}}/"
     patterns: "{{oldest_backup_dir_to_retain.stdout}}"
     file_type: directory
  register: oldest_backup_to_retain

- name: Remove old backup files invalid as per retention limit
  file:
    state: absent
    path: "{{ item.path }}/"
  when: item.ctime < oldest_backup_to_retain.files[0].ctime
  with_items: "{{ result_files.files | default([])  }}"

- name: Copy files to other machine
  shell: rsync -avP -e ssh {{backup_path}} {{sync.user}}@{{sync.host}}:{{sync.path}}
  when : not( (sync.host is undefined) or (sync.host is none) or (sync.host | trim == '') )
