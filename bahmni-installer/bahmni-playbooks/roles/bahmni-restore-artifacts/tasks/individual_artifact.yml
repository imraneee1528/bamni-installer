- name: Check that the {{options}}  exists 
  shell: ls -1tr {{item.restore_from_path}} | grep {{options}} 
  register: file 
  ignore_errors: true
  when: "options in item.name"
  with_items:
     - "{{all_artifacts}}"

- set_fact:
    item_configured: false

- name: check if {{options}} is configured
  set_fact:
   item_configured: true
  when: "item.name == options"
  with_items: "{{all_artifacts}}"

- name: Fail with Error Message if {{options}} is not configured
  fail:
     msg: "{{options}} zip file is not configured"
  failed_when: item_configured == false

- name: Fail with Error Message if {{options}} does not exist 
  fail:
     msg: "{{options}} zip file does not exist or it is empty"
  failed_when: "item.rc is defined and item.rc == 1"
  with_items: "{{ file.results }}"

- name: take backup of old artifacts before restore
  shell:
         cp -r {{item.restore_to_path}}{{item.name}} {{item.restore_to_path}}{{item.name}}_old/
  async: "{{artifacts.async_timing}}"
  when: "options in item.name"
  with_items:
    - "{{all_artifacts}}"
  ignore_errors: true

- name: restore artifacts from dest to src location
  shell:
         tar -xzvf {{item.restore_from_path}}/$(ls -A1 {{item.restore_from_path}} | grep {{item.name}} | tail -1)  -C {{restore_temp_dest_dir}}  2>{{restore_log_file}};
         cp -rp {{restore_temp_dest_dir}}/{{item.name}} {{item.restore_to_path}} 2>{{restore_log_file}};
  async: "{{artifacts.async_timing}}"
  when: "options in item.name"
  with_items:
    - "{{all_artifacts}}"
  ignore_errors: true
