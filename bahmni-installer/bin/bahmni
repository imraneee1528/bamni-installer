#!/bin/bash
set -e
set -e
yellow='\e[33m'
original='\e[0m'
red='\e[91m'
green='\e[92m'

if [ -z $2 ]
then
    INVENTORY_FILE='local'
else
    if [ $2 != '--implementation' ]
    then
        INVENTORY_FILE=/etc/bahmni-installer/$2
        if [ ! -f $INVENTORY_FILE ]
        then
            echo -e "$red ERROR: No inventory file at $INVENTORY_FILE.. $original"
            exit 1
        fi
        echo -e "$green Using inventory file at $INVENTORY_FILE.. $original"

        if [ ! -z $3 ] && [ $3 == '--implementation' ]
        then
            if [ -z $4 ]
            then
                echo -e "$red ERROR: No Implementation name given.. $original"
                exit 1
            else
                IMPL_NAME=$4
            fi
        fi
    else
        if [ -z $3 ]
        then
            echo -e "$red ERROR: No Implementation name given.. $original"
            exit 1
        else
            IMPL_NAME=$3
        fi
        INVENTORY_FILE='local'

    fi
fi


run_ansible() {
  if [ -f "/etc/bahmni-installer/setup.yml" ];
  then
    ansible_command="$ansible_command  --extra-vars '@/etc/bahmni-installer/setup.yml'"
  fi

  if [ -f "/etc/bahmni-installer/rpm_versions.yml" ];
  then
    ansible_command="$ansible_command  --extra-vars '@/etc/bahmni-installer/rpm_versions.yml'"
  fi

  if [ $INVENTORY_FILE == 'local' ]
  then
     echo -e "$green Using the local inventory file $original"
  fi

  if [ -z $IMPL_NAME ];
  then
     echo -e "$green Using default implementation config $original"
  else
    echo -e "$green Using $IMPL_NAME config present in /etc/bahmni-installer/${IMPL_NAME}_config $original"
    ansible_command="$ansible_command  --extra-vars 'implementation_name=$IMPL_NAME'"
  fi
  eval $ansible_command
}

# stops all services
stop() {
  	echo -e "Stopping bahmni..."
    ansible_command="cd /opt/bahmni-installer/bahmni-playbooks && chmod -x $INVENTORY_FILE && ansible-playbook -i $INVENTORY_FILE all.yml  -vvvv -t stop_bahmni"
    run_ansible
    
}

# starts all services
start() {
	echo -e "Starting bahmni..."
    ansible_command="cd /opt/bahmni-installer/bahmni-playbooks && chmod -x $INVENTORY_FILE && ansible-playbook -i $INVENTORY_FILE all.yml  -vvvv -t start_bahmni"
    run_ansible
}

# restarts all services
restart() {
	echo -e "Restarting bahmni..."
	stop
	sleep 3
	start
}

function is_service_running() {
    if (( $(ps -ef | grep -v grep | grep $1 | wc -l) > 0 ))
    then
        return 0
    else
        return 1
    fi
}

status() {
    up_count=0
    down_count=0
    for service in httpd mysql pgsql-9.2 openmrs bahmni-reports bahmni-lab openerp bahmni-erp-connect pacs-integration
    do
        if(is_service_running $service) then
            echo -e "$service...... $green[Running] $original"
            let up_count=$up_count+1
        else
            echo -e "$service...... $yellow[Not Running]$original"
            let down_count=$down_count+1
        fi
    done
}

mysql_replication(){
  ansible_command="cd /opt/bahmni-installer/bahmni-playbooks && chmod -x $INVENTORY_FILE && ansible-playbook -i $INVENTORY_FILE replication.yml  -vvvv "
  run_ansible
}

update_config(){
  echo -e "Deploying config from /etc/bahmni-installer/deployment-artifacts/<implementation_name>_config directory"
  ansible_command="cd /opt/bahmni-installer/bahmni-playbooks && chmod -x $INVENTORY_FILE && ansible-playbook -i $INVENTORY_FILE all.yml -t config -vvvv "
  run_ansible
}

concat_configs(){
  echo -e "Concatenating configs from /var/www/bahmni_config/openmrs directory"
  ansible_command="cd /opt/bahmni-installer/bahmni-playbooks && chmod -x $INVENTORY_FILE && ansible-playbook -i $INVENTORY_FILE concat-config.yml -vvvv "
  run_ansible
}

install_ansible() {
  sudo yum install -y ansible-1.9.4
}

install() {
  install_ansible
  ansible_command="cd /opt/bahmni-installer/bahmni-playbooks && chmod -x $INVENTORY_FILE && ansible-playbook -i $INVENTORY_FILE all.yml  -vvvv "
  run_ansible
}

printUsage() {
	echo -e "Usage:\n"
	echo -e "\tbahmni <command> [ <inventory_file_name> ] [options]"
	echo -e "\tList of Commands:"
	echo -e "\t\thelp               shows the help for all commands"
	echo -e "\t\tinstall            Installs bahmni components on respective hosts specified in inventory file"
	echo -e "\t\tstart              starts all the services required for bahmni"
	echo -e "\t\tstop               stops all the services required for bahmni"
	echo -e "\t\trestart            restarts all the services required for bahmni"
	echo -e "\t\tstatus             prints status of all the services required for bahmni"
	echo -e "\t\tsetup-replication  sets up mysql db replication"
	echo -e "\t\tupdate-config      updates the implementation config for bahmni from the location /etc/bahmni-installer/deployment-artifacts"
	echo -e "\t\tconcat-configs     concatenates the implementation config for bahmni from the location /var/www/bahmni_config"

    echo -e "\t<inventory_file_name> - Inventory file that needs to picked up from /etc/bahmni-installer"

    echo -e "\n\n\tOptions:"
    echo -e "\t\t--implementation   Option to specify the implementation config to be installed. Default value is 'default'. If this options is used, implementation config folder has to be placed in /etc/bahmni-installer/deployment-artifacts with name <impelementation>_config."
}

case "$1" in
	"help" )
	    echo "Command line tool for managing bahmni"
		printUsage
		;;
	"install" )
        install
		;;
	"start" )
		start
		echo -e "Run [bahmni status] to check the status"
		;;
	"stop" )
		stop
		echo -e "Run [bahmni status] to check the status"
		;;
	"restart" )
		restart
		echo -e "Run [bahmni status] to check the status"
		;;
	"setup-replication" )
		mysql_replication
		echo -e "Run [bahmni status] to check the status"
		;;
	"update-config" )
		update_config
		echo -e "Run [bahmni status] to check the status"
		;;
	"concat-configs" )
    	concat_configs
    	echo -e "Run [bahmni status] to check the status"
    	;;
	"status" )
		status
		;;
	* )
		echo "bahmni: Bad usage." 
		if [ ! -z $1 ]
		then
		   echo -e \n "Invalid option -- $1"
		fi  
		printUsage
		;;
esac

tput sgr0

exit 0